#ifndef COMMON_MESSAGETYPES_H_
#define COMMON_MESSAGETYPES_H_

#include "logger/logger.h"

#include <stdint.h>
#include <unistd.h>
#include <limits.h>
#include <list>
#include <set>
#include <string>
#include <vector>
#include "consts.h"
#include "types.h"
#include "events/events.h"

using namespace std;

enum InputEventTypeEnum
{
	Key = 0,
	RelativeMove,
	AbsoluteMove
};

struct KeyEvent
{
	uint16_t key;
	bool state;
};
typedef struct KeyEvent KeyEvent;

struct RelativeMoveEvent
{
	int deltaX;
	int deltaY;
	int wheelMove;
};
typedef struct RelativeMoveEvent RelativeMoveEvent;

struct AbsoluteMoveEvent
{

};
typedef struct AbsoluteMoveEvent AbsoluteMoveEvent;

union MEvent
{
	KeyEvent keyEvent;
	RelativeMoveEvent relativeMoveEvent;
	AbsoluteMoveEvent absoluteMoveEvent;
};
typedef union MEvent MEvent;

// Single processed event record (use one of union structures, depending on type)
struct MInputEvent
{
	InputEventTypeEnum type;
	int deviceID = INVALID_FILE_DESCRIPTOR;

	MEvent event;

	MInputEvent() {};
	MInputEvent(InputEventTypeEnum type) { this->type = type; };
	virtual ~MInputEvent() {};
};
typedef struct MInputEvent MInputEvent;

// Vector of events collection (required to keep order of events)
typedef vector<MInputEvent> MInputEvents;

// Used as payload for all notification messages generated by InputPoller
struct MInputMessage : public MessagePayloadBase
{
	// Better-enums workaround (declare proxy enum within struct/class)
	typedef InputDeviceTypeEnum InputDeviceType;

	int deviceID = INVALID_FILE_DESCRIPTOR;
	InputDeviceType deviceType = InputDeviceType::Unknown;

	MInputEvents events;
};
typedef struct MInputMessage MInputMessage;

// Specific event for device insert/remove notifications generated by DeviceDetector
struct DeviceStatusEvent: public MessagePayloadBase
{
	string device;

	DeviceStatusEvent(string device) : device(device) { /*TRACE("DeviceStatusEvent(<param>)");*/ };
	virtual ~DeviceStatusEvent() { /*TRACE("~DeviceStatusEvent()");*/ };
};

#endif /* COMMON_MESSAGETYPES_H_ */
